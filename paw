#!/bin/bash
set -euo pipefail

function search_secret() {
  ssh -q -t ${host} grep -HE "${1}" ${path}/file*.asc \
    || ssh -q -t ${host} find ${path} -name "*${1}*" -printf '%p:' -exec grep Comment: {} \\\;
}

function get_remote_secret() {
  echo "${1}" | ssh -q -t ${host} gpg -d --batch -q --no-tty --passphrase-fd 0 -o - ${2}
}

function get_next_filename() {
  ssh -q -t ${host} ls -1 ${path}/file*[0-9]* 2\>/dev/null | sort | tail -1 | grep -oE '[0-9]+'
}

function store_remote_secret() {
  encrypt_io "${1}" "${2}" | ssh -q -t ${host} "cat > ${path}/${3}"
  echo "Wrote: ${3}"
}

function encrypt_io() {
  echo -e "${1}" | gpg --batch -q --no-tty -c \
    --cipher-algo AES256 \
    --digest-algo sha256 \
    --cert-digest-algo sha256 \
    --compress-algo none -z 0 \
    --s2k-mode 3 \
    --s2k-digest-algo sha256 \
    --s2k-count 65011712 \
    --force-mdc \
    -a --comment "${2}" -o -
}

function add_new_secret() {
  local num=$(get_next_filename)
  num=$(( num+1 ))
  local file="file$(printf "%03d" ${num}).asc"
  echo "Intending to create: ${host}:${path}/${file}"
  local demo=""
  which apg 2>&1 >/dev/null && demo=" (eg: $(apg -n1 -m 32 -x 64))"
  read -r -e -p "username: " username
  if [ "${username}" ]; then
    read -r -e -p "password${demo}: " password
    read -r -e -p "additional secret: " private
    read -r -e -p "searchable keywords: " keywords
    store_remote_secret "${username//\\/\\\\}\n${password//\\/\\\\}\n${private//\\/\\\\}\n" "${keywords}" "${file}"
  fi
}

if [ "${#}" -eq 0 ]; then
  cat <<EOF
# interactive mode
usage: paw USER@HOST:PATH

# one-shot mode
usage: echo searchstring | paw USER@HOST:PATH

# populate environment vars mode
usage: \$(echo searchstring | paw USER@HOST:PATH [VAR_ONE] [VAR_TWO] [VAR_THREE])
EOF
  exit 1
fi

IFS=: read host path <<< "${1}"
session=43200


# Handle stdin searches
if [[ ! -t 0 ]]; then
  read -a query
  [ -v passphrase ] || read -e -p "gpg passphrase: " -s passphrase < /dev/tty
  files=$(search_secret "${query}")
  if [ "${files}" ]; then
    file=$(echo "${files}" | sort | cut -f1 -d':' | tail -1)
    cred="$(get_remote_secret "${passphrase}" "${file}")"

    one=$(sed "1q;d" <<< "${cred}") # username
    two=$(sed "2q;d" <<< "${cred}") # password
    thr=$(sed "3q;d" <<< "${cred}") # additional secret

    shift

    if [ "${#}" -eq 0 ]; then
      echo "${one}"
      echo "${two}"
      echo "${thr}"
    elif [ "${#}" -eq 1 ]; then
      echo "export $1=${one}"
    elif [ "${#}" -eq 2 ]; then
      echo "export $1=${one}"
      echo "export $2=${two}"
    elif [ "${#}" -eq 3 ]; then
      echo "export $1=${one}"
      echo "export $2=${two}"
      echo "export $3=${thr}"
    fi
  fi
  exit 0
fi

# interactive mode: retrieve an existing password
while read -e -p "${status:-}Enter \"new\" or search for: " query; do
  if [ "${query}" == "new" ]; then
    add_new_secret
  elif [ "${query}" ]; then
    if [ $(( "$(date +%s)" - ${last_success:- 0} + 1 )) -gt ${session} ]; then
      read -e -p "gpg passphrase: " -s passphrase
      echo
    fi
    files=$(search_secret "${query}")
    if [ "${files}" ]; then
      file=$(echo "${files}" | sort | tee /dev/stderr | cut -f1 -d':' | tail -1)
      cred="$(get_remote_secret "${passphrase}" "${file}")"
      [ "${cred}" ] && last_success=$(date +%s)
      sed "1q;d" <<< "${cred}" | xclip -loops 3 -i -selection primary -f   # username
      sed "2q;d" <<< "${cred}" | xclip -loops 3 -i -selection clipboard    # password
      sed "3q;d" <<< "${cred}"                                             # additional secret
    fi
  fi

  session_time_remaining=$(( ( ${last_success:- 0} + ${session} - $(date +%s) + 1 ) / 60 ))
  if [ ${session_time_remaining} -gt 0 ]; then
    status="[${session_time_remaining}m] "
  fi
done
